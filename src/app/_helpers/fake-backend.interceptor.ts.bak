import { Injectable } from '@angular/core';
import {
  HttpRequest,
  HttpResponse,
  HttpHandler,
  HttpEvent,
  HttpInterceptor,
  HTTP_INTERCEPTORS
} from '@angular/common/http';
import { Observable, of, throwError } from 'rxjs';
import { delay, mergeMap, materialize, dematerialize } from 'rxjs/operators';

import { allowedRoles } from '../_models/roles';
import { IEmployee } from '../_models/employee.interface';

@Injectable()
export class FakeBackendInterceptor implements HttpInterceptor {
  intercept(
    request: HttpRequest<any>,
    next: HttpHandler
  ): Observable<HttpEvent<any>> {
    const employes: IEmployee[] = [
      {
        _id: '1',
        email: 'admin@email.com',
        password: 'admin',
        firstName: 'Admin',
        lastName: 'User',
        phone: '1234',
        company: 'company',
        creditCard: '1234',
        role: allowedRoles.ADMIN
      },
      {
        _id: '2',
        email: 'user@email.com',
        password: 'user',
        firstName: 'Normal',
        lastName: 'User',
        phone: '1234',
        company: 'company',
        creditCard: '1234',
        role: allowedRoles.EMPLOYE
      }
    ];

    const authHeader = request.headers.get('Authorization');
    const isLoggedIn = authHeader && authHeader.startsWith('Bearer fake-jwt-token');
    const roleString = isLoggedIn && authHeader.split('.')[1];
    const role = roleString ? allowedRoles[roleString] : null;

    // wrap in delayed observable to simulate server api call
    return (
      of(null)
        .pipe(
          mergeMap(() => {
            // authenticate - public
            if (
              request.url.endsWith('/users/authenticate') &&
              request.method === 'POST'
            ) {
              const employe = employes.find(
                x =>
                  x.email === request.body.email &&
                  x.password === request.body.password
              );
              if (!employe) {
                return error('Username or password is incorrect');
              }
              return ok({
                id: employe._id,
                email: employe.email,
                firstName: employe.firstName,
                lastName: employe.lastName,
                role: employe.role,
                token: `fake-jwt-token.${employe.role}`
              });
            }

            // get user by id - admin or user (user can only access their own record)
            if (
              request.url.match(/\/users\/\d+$/) &&
              request.method === 'GET'
            ) {
              if (!isLoggedIn) {
                  return unauthorised();
                }

              // get id from request url
              const urlParts = request.url.split('/');
              const partsLength = urlParts.length;
              const id = +urlParts[partsLength - 1];

              // only allow normal users access to their own record
              const currentEmploye = employes.find(x => x.role === role);
              if (id !== +currentEmploye._id && role !== allowedRoles.ADMIN) {
                return unauthorised();
              }

              const employe = employes.find(x => +x._id === id);
              return ok(employe);
            }

            // get all users (admin only)
            if (request.url.endsWith('/users') && request.method === 'GET') {
              if (role !== allowedRoles.ADMIN) {
                  return unauthorised();
                }
              return ok(employes);
            }

            // pass through any requests not handled above
            return next.handle(request);
          })
        )
        // call materialize and dematerialize to ensure delay even if an error is
        // thrown (https://github.com/Reactive-Extensions/RxJS/issues/648)
        .pipe(materialize())
        .pipe(delay(500))
        .pipe(dematerialize())
    );

    // private helper functions

    function ok(body) {
      return of(new HttpResponse({ status: 200, body }));
    }

    function unauthorised() {
      return throwError({ status: 401, error: { message: 'Unauthorised' } });
    }

    function error(message) {
      return throwError({ status: 400, error: { message } });
    }
  }
}

export let fakeBackendProvider = {
  // use fake backend in place of Http service for backend-less development
  provide: HTTP_INTERCEPTORS,
  useClass: FakeBackendInterceptor,
  multi: true
};
